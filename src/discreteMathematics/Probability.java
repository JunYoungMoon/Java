package discreteMathematics;

public class Probability {
    public static void main(String[] args) {
        /**
         * 확률
         * 설명 : 어떤 사건이 일어날 가능성을 수치화한 것
         *       표본공간(Sample space) 실험의 결과가 될수 있는 모든 경우의 집합
         *       실험(Experiment) 모든 경우의 수에서 하나를 뽑는 절차
         *       p(E) = 사건 E가 일어나는 경우의 수 (E) / 모든 경우의 수 (S)
         */

        int n = 52;
        int r = 5;
        long s = 1;
        //포커에서 포카드 받기
        //카드는 총52장 중에서 5장을 받을수 있다.
        //같은 숫자의 카드는 총 4개씩 13그룹으로 나눌수 있는데, 같은 그림의 카드 4장을 받게되면 포카드라고한다.
        //1. 표본공간을 구한다.
        //2. 포카드를 받을 경우의수를 구한다.
        //3. 나머지 한개의 카드의 경우의수를 구해서 모든 경우를 곱한다.

        //1. 표본공간을 구한다.
        for (int i = n; i > n - r; i--) {
            s = s * i;
        }

        //2. 포카드를 받을 경우의수
        //같은 숫자의 4장의 카드를 그룹화 하면 총 13개의 그룹이 나온다. 그중 하나를 뽑는 경우의수 13C1
        float fourCardCase = 13;

        //3. 나머지 한개의 카드의 경우의수를 구해서 모든 경우를 구한다.
        //포카드 4개를 제외한 것중에 하나를 뽑는 경우의수 48C1
        float lastOneCard = 48;

        // p(E) = (E) / (S)
        float result = fourCardCase * lastOneCard / s;

        System.out.println("포커에서 포카드 받을 확률 : " + String.format("%.9f", result));

        /**
         * 여사건
         * 설명 : 어떤 사건이 일어날 확률을 알면 그사건이 일어나지 않을 확률도 앎
         *       여사건 p(E ̅) = 1 - p(E)
         */

        //8비트수에서 값이 1인 비트가 최소 하나는 있을 확률
        //1. 1인 비트가 최소 하나가 있다의 반대는 값이 1인 비트가 없다 즉 모두 값이 0이다.
        double a = (double) 1 / 256;

        System.out.println("8비트중 값이 1인 비트가 하나 이상 있을 확률 : " + String.format("%.09f", 1 - a));


        /**
         * 조건부 확률
         * 설명 : 어떤 사건 F가 발생했을 때, 그런 상황 하에서 사건 E가 일어날 확률
         *       p(E|F)
         */

        //동전 연속으로 던지기
        //동전을 3번 던지려고 한다. 처음에는 앞면이 나왔고 이제 2번더 던지면 앞면이 나온 총 횟수가 홀수번인 확률
        //F : 첫번째 면이 앞면인 경우
        //E : 앞면이 홀수번 나오는 경우

        //1.먼저 트리로 F와 E를 모두 만족할때의 확률을 찾는다.
        //|E ∩ F| = 2 (앞뒤뒤, 앞앞앞)
        //2.표본공간 구하기
        //|S| = 2^3 = 8
        //p(E ∩ F) = 2/8 = 1/4
        //3.첫번째 동전이 앞면일때 표본 공간에서 확률 구하기 (1/4의 4는 첫번째 동전이 앞,뒤 모두의 표본 공간)
        //앞면이 표본공간의 절반을 차지 즉 p(E) = 1/2 위에서 구한 표본공간 4에서 1/2를 한다.

        //p(E|F) = |E ∩ F| / |S| * p(F) = p(E ∩ F) / p(F)

        /**
         * 독립사건
         * 설명 : 조건부 확률에서 F가 E에 영향을 미치지 않는경우
         *       즉 조건 F가 붙던 안붙던 E가 발생할 확률이 같다.
         *       p(E | F) = p(E)
         */

        //2비트수에서 최상위 비트가 1일때, 그수가 홀수인 확률
        //1. 2비트로 표현할수 있는 수의 경우의수 |S| = 2^2 = 4
        //2. 표본공간 전부를 고려할때 홀수일 확률은 p(E) = 2/4 = 1/2
        //3. 최상위비트를 1로 뽑은 상황 하에서의 표본 공간만 고려하면 p(E|F) = 1/2
        //2,3번의 두사건의 확률은 바뀌지 않는다 따라서 F와E는 독립적이다.

        //독립 사건에 조건부 확률 공식을 쓰면 두 사건이 독립인지 아닌지 판단할수 있음
        //p(E) 분모를 좌항의 분자로 보내면 p(E)p(F) = p(E ∩ F)를 통해서 등식이 성립하면 독립사건

        //E:두 자녀 모두 딸 (1/4)
        //F:자녀중 최소 한명이 딸 (3/4)
        //이 둘은 독립인지 판단하려면 p(E)p(F) = p(E ∩ F) 등식이 성립하는지 확인
        // 1/4 * 3/4 ≠ 1/4 독립 아님

        /**
         * 기댓값
         * 설명 : 어떤 실험을 여러번하면 나오는 평균값
         */
        //주사위 하나를 던질때의 기댓값
        //1 + 2 + 3 + 4 + 5 + 6 / 6 = 21/6 = 3.5

        //각사건마다 확률이 다를경우(가중 산술 : 평균 자료의 평균을 구할 때 자료 값의 중요도나 영향 정도에 해당하는 가중치를 반영하여 구한 평균값) 기댓값
        //두 주사위를 굴려 나오는 합의 기댓값
        //1 / 36 => 2 : 1 + 1
        //2 / 36 => 3 : 1 + 2, 2 + 1
        //3 / 36 => 4 : 1 + 3, 2 + 2, 3 + 1
        //4 / 36 => 5 : 1 + 4, 2 + 3, 3 + 2, 4 + 1
        //5 / 36 => 6 : 1 + 5, 2 + 4, 3 + 3, 4 + 2, 5 + 1
        //6 / 36 => 7 : 1 + 6, 2 + 5, 3 + 4, 4 + 3, 5 + 2, 6 + 1
        //5 / 36 => 8 : 2 + 6, 3 + 5, 4 + 4, 5 + 3, 6 + 2
        //4 / 36 => 9 : 3 + 6, 4 + 5, 5 + 4, 6 + 3
        //3 / 36 => 10 : 4 + 6, 5 + 5, 6 + 4
        //2 / 36 => 11 : 5 + 6, 6 + 5
        //1 / 36 => 12 : 6 + 6
        //두수의 합은 2 ~ 12의 수가 나온다.
        //두수의 합의 갯수 / 주사위 2개를 던질때의 경우의수

        //가중치
        float weight = 1;
        //가중평균
        float weightedAverage = 0;

        float i;

        for (i = 1; i <= 6; i++) {
            weight++;
            weightedAverage = weightedAverage + (weight * (i / 36));
        }

        for (i = i - 2; i > 0; i--) {
            weight++;
            weightedAverage = weightedAverage + (weight * (i / 36));
        }

        System.out.println("두 주사위를 굴려 나오는 합의 기댓값 : " + weightedAverage);

        /**
         * 확률 변수(random variable)
         * 설명 : 이름은 '변수'지만 하는 행동은 함수, random이지만 난수가 아님.
         *       무작위로 시행,실험하는것(random process) 그 과정들을 수치화한 함수
         *       표본공간에서 실행한 실험의 결과를 어떤 숫자로 수치화 해주는 함수 보통 X로 표기
         */
        //두개의 동전 던지기
        //확률 변수 X = 앞면이 나오는 횟수
        //모든 경우의수에서 확률변수로 표현 (앞앞 > X(2), 앞뒤 뒤앞 > X(1), 뒤뒤 > X(0))
        //확률 변수를 이용해 확률을 표현하면 다음과 같다.
        //P(X = 0) = 1/4
        //P(X = 1) = 2/4 = 1/2
        //P(X = 2) = 1/4

        //두개의 동전 던지기 기댓값
        //확률변수
        int x;
        //각각의 확률
        float[] p = {1/4f,1/2f,1/4f};
        //기댓값
        float e = 0;

        for (int j = 0; j < p.length; j++) {
            x = j;
            e = e + (x * p[j]);
        }

        System.out.println("두개의 동전 던지기 기댓값 : "+ e);
        //수치가 없는 사건의 결과들도 수치화를 시켜버리면 기댓값을 구할수 있고,
        //기대값을 수치화가 안되어있던 어떤 표현(X)으로 돌려버리면 이정도의 결과값을 기대할수 있다고 말할수 있다.

        /**
         * 확률분포
         * 설명 : 이산(discrete) 확률 분포 : 확률분포가 띄엄띄엄 떨어져있다. 그래프가 층으로 되어있음
         *       이산 균등 분포 : 각 확률이 모두 같은 값을 가지는 이산 확률 분포 (주사위를 굴렸을때 각면이 나올 확률은 1/6)
         *       이산 균등 분포(2) : 난수 혹은 랜덤수를 말하는데 이 균등성이 깨지면 편향된 결과가 나옴 균등성이 깨지면 편향된 결과가 나오는데
         *                         이렇게 되면 세상의 모든 결정,결론들이 의미가 없어진다.
         * 공식 : 위에서 본 기댓값과 같은 공식
         */

        /**
         * 연속(continuous) 확률분포
         * 설명 : 확률변수가 특정 구간 안의 모든 실수값을 취하는경우
         *       모든 실수 값을 취하는 경우는 무한대기 때문에 부드러운 곡선 즉 그래프가 나온다.
         *       확률분포에서 모든 확률을 더하면 1 즉 그래프 안의 면적이 1 이것이 바로 적분
         *       컴퓨터 세계는 아날로그가 아니라 디지털이기 때문에 주로 이산 확률 분포를 사용
         *
         */
    }
}
